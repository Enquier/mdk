package gov.nasa.jpl.mbee.mdk.mms.actions;

import org.apache.commons.io.FileUtils;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.nomagic.magicdraw.core.Application;
import com.nomagic.magicdraw.core.Project;
import com.nomagic.magicdraw.tests.MagicDrawTestRunner;
import com.nomagic.magicdraw.uml.BaseElement;
import com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element;

import gov.nasa.jpl.mbee.mdk.api.MagicDrawHelper;
import gov.nasa.jpl.mbee.mdk.options.MDKOptionsGroup;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.IOException;

/**
 * Create a PDF from MDK Document Model
 * 1. create PDF from samples/MDK/DocGen.mdzip
 * 2. Using the docbook XML file created by step 1, created PDF.
 *  
 * @author Miyako Wilson
 * @JIRA Cameo MDK MDK-64
 *
 */
@RunWith(MagicDrawTestRunner.class)
public class GeneratePDFFromMDModelTest 
{
    /**
     * Project on which test is performed.
     */
    private static Project project;
    private static File docbookXslFo;
    /**
     * Constructs this test.
 	 *
     */
    public GeneratePDFFromMDModelTest(){}

    @BeforeClass
    public static void setupProject() throws Exception  {

    	String userdir = System.getProperty("user.dir");
        File docGenProjectFile = new File(userdir + File.separator + "samples" + File.separator + "MDK" + File.separator + "DocGen.mdzip");
        File testProjectFile = new File(userdir, "DocGenCopied1.mdzip");
        FileUtils.copyFile(docGenProjectFile, testProjectFile);
        
        MDKOptionsGroup.getMDKOptions().setDefaultValues();
        MDKOptionsGroup.getMDKOptions().setLogJson(true);
        MagicDrawHelper.openProject(testProjectFile);
        project = Application.getInstance().getProject();
                        
        //ClassLoader classLoader = GeneratePDFFromMDModelTest.class.getClassLoader();
        docbookXslFo = new File(userdir + File.separator + "plugins" + File.separator + "gov.nasa.jpl.cae.magicdraw.mdk" + File.separator + "docbook-xsl-1.79.1" + File.separator + "fo" + File.separator  + "mdk-default.xsl");
        if ( !docbookXslFo.exists())
        	throw new Exception("\"docbook.xsl\" is not found in mdk plugin.");
    }
    @Test
    public void init() {
        assertTrue(project != null);
        assertTrue(docbookXslFo.exists());
    }
    @Test 
    public void testMDKModeltoPDFDocGenUsersGuide() {
    	
    	File outputPdfFile = new File(System.getProperty("user.dir") + File.separator + "testPDF.pdf");
    	try {
    		BaseElement documentElement = project.getElementByID("_18_5_3_8bf0285_1518738536487_780455_42886"); //DocGen
    		GeneratePDF gp = new GeneratePDF((Element)documentElement);
    		File autoGeneratedDocbookfile = new File(outputPdfFile + ".xml");
    		gp.generate(autoGeneratedDocbookfile, docbookXslFo, outputPdfFile);
    		assertTrue(outputPdfFile.exists());
    		assertTrue(outputPdfFile.length() > 5000000);//5,374,128 - size is about 1k if pdf is corruptly created
    	} catch (Exception e) {
    		e.printStackTrace();
    		Assert.fail("exception thrown during this test");
    	}
    	
    }
    //using DocBook XML file created by the previous test to create pdf file.
    @Test 
    public void testXMLtoPDF() {
    	File docgenFile =new File(System.getProperty("user.dir") + File.separator + "testPDF.pdf.xml");
    	File outputPdfFile = new File(System.getProperty("user.dir") + File.separator + "testPDFFromXML.pdf");
    	try {
    		GeneratePDFFromDocBookDocument gp = new GeneratePDFFromDocBookDocument(null);//(Element)documentElement);
    		gp.generate(docgenFile, docbookXslFo, outputPdfFile);
    		assertTrue(outputPdfFile.exists());
    		assertTrue(outputPdfFile.length() > 5000000);//5,374,128 - size is about 1k if pdf is corruptly created
    	} catch (Exception e) {
    		e.printStackTrace();
    		Assert.fail("exception thrown during this test");
    	}
    }
    
    @AfterClass
    public static void closeProject() throws IOException {
        MagicDrawHelper.closeProject();
    }

}