package gov.nasa.jpl.mbee.mdk.mms.actions;

import com.nomagic.magicdraw.actions.MDAction;
import com.nomagic.magicdraw.core.Application;
import com.nomagic.magicdraw.core.Project;
import com.nomagic.magicdraw.plugins.Plugin;
import com.nomagic.magicdraw.plugins.PluginDescriptor;
import com.nomagic.magicdraw.plugins.PluginUtils;
import com.nomagic.ui.ProgressStatusRunner;
import com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element;

import gov.nasa.jpl.mbee.mdk.api.incubating.convert.Converters;
import gov.nasa.jpl.mbee.mdk.docgen.ViewViewpointValidator;
import gov.nasa.jpl.mbee.mdk.generator.DocumentAndPDFWriter;
import gov.nasa.jpl.mbee.mdk.generator.DocumentGenerator;
import gov.nasa.jpl.mbee.mdk.generator.PostProcessor;
import gov.nasa.jpl.mbee.mdk.model.Document;
import gov.nasa.jpl.mbee.mdk.options.MDKOptionsGroup;
import gov.nasa.jpl.mbee.mdk.util.Utils;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.lang.exception.ExceptionUtils;
import org.xml.sax.SAXException;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.Optional;

/**
 * Action to Generate DocBook(xml) from MD Document Model, then Convert it to PDF
 * 
 * default xsl is pointing to a free Document Modeling Plugin.
 */
public class GeneratePDF extends MDAction {

	protected Element view;
    private static final long serialVersionUID = 1L;
    public static final String DEFAULT_ID = GeneratePDF.class.getSimpleName();
    //if "Document Modeling" plugin (no cost) is installed
    protected static File xslDefaultFile = null;
    protected static File pdfDefaultDir = null;
    protected static File pluginDirectory;
    
    
    public GeneratePDF(String id, String name, Element view)
    {
    	super(id, name, null, null);
        this.view = view;
        
        //Get our plugin directory
        Optional<PluginDescriptor> pd = PluginUtils.getPlugins().stream().map(Plugin::getDescriptor)
        		.filter(descriptor -> descriptor.getName().equals("Model Development Kit"))
        		.findFirst();
        if ( pd.isPresent() )
    		pluginDirectory = pd.get().getPluginDirectory(); 
        
    }

    public GeneratePDF(Element view) {
        this(DEFAULT_ID, "PDF", view);
      
    }
    protected File fileSelect(String title, File defaultFile, String approveButtonText, FileNameExtensionFilter filter) {
        JFileChooser choose = new JFileChooser();
        if (defaultFile != null)
        	if ( defaultFile.isDirectory())
        		choose.setCurrentDirectory(defaultFile);
        	else
        		choose.setSelectedFile(defaultFile);
        
        choose.setDialogTitle(title);
        
        if ( filter != null) {
        	choose.addChoosableFileFilter(filter);
        	choose.setFileFilter(filter);
        }
        int retval = choose.showDialog(null, approveButtonText);
        if (retval == JFileChooser.APPROVE_OPTION) {
            return choose.getSelectedFile();
        }
        return null;
    }
    @Override
    public void actionPerformed(ActionEvent e) {
        try {
        	//1. ask for the outputfile (pdf) file
        	File outputPdfFile = askForPDFFile();
    		if ( outputPdfFile != null) {
    			//assign docbook xml be created filename based on the pdf file
    			File autoGeneratedDocbookfile = new File(outputPdfFile + ".xml");
    	    	//2. get stylesheet (xsl) info from options->Environment->MDK
    			if (checkForStyleSheetXMLFile())
    				generate(autoGeneratedDocbookfile, xslDefaultFile, outputPdfFile);
	    	}
        } catch (Exception ex) {
        	Application.getInstance().getGUILog().log("[Error] Failed to generate a PDF." + ExceptionUtils.getStackTrace(ex));
        }
    }
    protected boolean checkForStyleSheetXMLFile() {
    	
    	Application.getInstance().getGUILog().log("[Info] The default stylesheet can be set at \"Default Docbook to PDF Stylesheet\" in Options -> Environment -> MDK");
    	if (xslDefaultFile == null) { //first time 
    		if (MDKOptionsGroup.getMDKOptions().getDefaultDocBookToPDFStyleSheet() != null && !MDKOptionsGroup.getMDKOptions().getDefaultDocBookToPDFStyleSheet().trim().isEmpty())
        		xslDefaultFile = new File(MDKOptionsGroup.getMDKOptions().getDefaultDocBookToPDFStyleSheet().trim());
    		else 
	        	xslDefaultFile = new File(pluginDirectory , "docbook-xsl-1.79.1" + File.separator + "fo" + File.separator + "mdk-default.xsl");
	    }
    	//Application.getInstance().getGUILog().showMessage("xsl: " + xslDefaultFile.getAbsolutePath());
    	//Ask to select the stylesheet - a user has an opportunity to change the stylesheet.
    	xslDefaultFile = fileSelect("Select a stylesheet(xsl) to use ...", xslDefaultFile, "Select", new FileNameExtensionFilter("Stylesheet(XSL)", "xsl"));
	    
    	if ( xslDefaultFile == null || !xslDefaultFile.exists()) {
    		Application.getInstance().getGUILog().log("xslDefaultFile does not exist.");
    		return false; //cancel or the file does not exist.
    	}
	    else 
	    	MDKOptionsGroup.getMDKOptions().setDefaultDocBookToPDFStyleSheet(xslDefaultFile.getAbsolutePath());
	    
	    return true;
    	
    }
    protected File askForPDFFile() {
    	File outputPdfFile = fileSelect("Specify a pdf file to save ...", pdfDefaultDir, "Save", new FileNameExtensionFilter("PDF", "pdf"));
    	if ( outputPdfFile == null) return null;
    	pdfDefaultDir = outputPdfFile.getParentFile();
    	//if a output file is not *.pdf then add *.pdf.
    	if ( !outputPdfFile.getName().endsWith(".pdf"))
    		outputPdfFile = new File(outputPdfFile + ".pdf");
    	return outputPdfFile;
    }
    
    
    protected Document prepToDocBook()
    {
   	
    	Project project = Application.getInstance().getProject();
        ViewViewpointValidator dv = new ViewViewpointValidator(Collections.singleton(view), project, true);
        dv.run();
        if (dv.isFailed()) {
        	Application.getInstance().getGUILog().log("[Error] View validation failed for " + Converters.getElementToHumanNameConverter().apply(view) + ". Aborting generation.");
            Utils.displayValidationWindow(project, dv.getValidationSuite(), dv.getValidationSuite().getName());
            return null;
        }
        DocumentGenerator dg = new DocumentGenerator(view, dv, null);
        Document dge = dg.parseDocument();
        (new PostProcessor()).process(dge);
        return dge;
    }
   
    //MDK Document model -> PDF file
    protected void generate(File autoGeneratedDocbookfile, File docbookXslFo, File outputPdfFile) {
    	Application.getInstance().getGUILog().log("Generating PDF in "+ outputPdfFile.getAbsolutePath());
    	Document doc = prepToDocBook();
    	//Application.getInstance().getGUILog().log("!!!!!!!!!!!!!!!!!!!!!!!!doc: " + doc);
    	if ( doc != null)
			ProgressStatusRunner.runWithProgressStatus(new DocumentAndPDFWriter(doc, doc.getGenNewImage(), autoGeneratedDocbookfile, docbookXslFo, outputPdfFile, pluginDirectory), "Generating a DocBook XML then converting to a PDF...", true, 0);
		
    }
   
    
}
